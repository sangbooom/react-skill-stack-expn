{"version":3,"sources":["todolist/TodolistItem.tsx","todolist/Todolist.tsx","todolist/TodoInsert.tsx","todolist/TodoHeader.tsx","todolist/Todo.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","memo","todos","onDeleteHandler","onCheckToggleHandler","onEditHandler","useState","toggle","setToggle","text","edit","setEdit","theme","useTheme","content_wrapper","css","display","flexDirection","justifyContent","alignItems","padding","marginTop","marginBottom","border","borderRadius","backgroundColor","nthBg","content__input__change_false","color","inputText","inputBorder","inputBackgroundColor","content__button__change_false","width","height","boxSizing","background","marginRight","onClick","id","checked","Fragment","content__button__change_true","content__text__change_true","onChange","e","target","value","content__button__toggle","todoId","textDecoration","marginLeft","Todolist","todo","map","key","TodoInsert","onSubmitHandler","todoInput","onChangeInput","content__button_confirm","buttonBg","buttonBorder","transitionDuration","transitionProperty","cursor","buttonBgHover","buttonTextHover","content_wrapper__form","content_wrapper__input","paddingLeft","fontSize","onSubmit","TodoHeader","onSearchHandler","undoneTasks","filter","today","Date","dateString","toLocaleDateString","year","month","day","dayName","weekday","header__main_title","headerMainTitleText","textAlign","header__sub_title","headerSubTitleText","header__content","header__input","placeholder","length","Todo","isDark","setDark","setTodoInput","JSON","parse","localStorage","getItem","setTodo","keyword","setKeyword","nextId","useRef","Math","max","useCallback","preventDefault","current","concat","setItem","stringify","alert","console","log","editedText","debounceHandler","debounce","evt","wrapper","maxWidth","margin","content","overflowY","container","footer","indexOf","themeLight","buttonText","headerContentText","themeDark","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bd5dcf2c.chunk.js","sourcesContent":["/** @jsx jsx */\r\nimport React, { ChangeEvent, useState } from \"react\";\r\nimport { jsx, css, useTheme } from \"@emotion/react\";\r\n\r\ninterface Todo {\r\n  id: number;\r\n  text: string;\r\n  checked: Boolean;\r\n}\r\ninterface TodolistItemProps {\r\n  todos: Todo;\r\n  onDeleteHandler(todoId: number): void;\r\n  onCheckToggleHandler(todoId: number): void;\r\n  onEditHandler(todoId: number, editedText: string): void;\r\n}\r\n\r\nconst TodolistItem: React.FC<TodolistItemProps> = ({\r\n  todos,\r\n  onDeleteHandler,\r\n  onCheckToggleHandler,\r\n  onEditHandler,\r\n}) => {\r\n  const [toggle, setToggle] = useState<boolean>(true);\r\n  const [edit, setEdit] = useState<string>(todos.text);\r\n\r\n  const onToggleHandler = (todoId: number) => {\r\n    if (!toggle && todos.text !== edit) {\r\n      onEditHandler(todoId, edit);\r\n    }\r\n    setToggle(!toggle);\r\n  };\r\n\r\n  const onChangeText = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setEdit(e.target.value);\r\n  };\r\n\r\n  const onChangeHandler = () => {\r\n    if (!toggle) {\r\n      return;\r\n    }\r\n    onCheckToggleHandler(todos.id);\r\n  };\r\n\r\n  const theme = useTheme() as any;\r\n\r\n  const content_wrapper = css({\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    padding: 20,\r\n    marginTop: 10,\r\n    marginBottom: 10,\r\n    border: \"0.3px solid #e6e6e6\",\r\n    borderRadius: 10,\r\n    \"& div\": {\r\n      display: \"flex\",\r\n      flexDirection: \"row\",\r\n    },\r\n    \"&:nth-child(2n)\": {\r\n      backgroundColor: `${theme.nthBg}`\r\n    }\r\n  });\r\n\r\n  const content__input__change_false = css({\r\n    color: `${theme.inputText}`,\r\n    border: `1px solid ${theme.inputBorder}`,\r\n    backgroundColor: `${theme.inputBackgroundColor}`,\r\n  })\r\n\r\n  const content__button__change_false = css({\r\n    width: 20,\r\n    height: 20,\r\n    boxSizing: \"border-box\",\r\n    border: `1px solid ${theme.inputBorder}`,\r\n    backgroundColor: `${theme.background}`,\r\n    marginRight: 10,\r\n  });\r\n\r\n  return (\r\n    <div css={content_wrapper}>\r\n      <div onClick={onChangeHandler}>\r\n        {todos.checked && toggle ? (\r\n          <React.Fragment>\r\n            <div css={content__button__change_true} />\r\n            <div css={content__text__change_true}>{todos.text}</div>\r\n          </React.Fragment>\r\n        ) : toggle ? (\r\n          <React.Fragment>\r\n            <div css={content__button__change_false} />\r\n            {todos.text}\r\n          </React.Fragment>\r\n        ) : (\r\n          <input css={content__input__change_false} onChange={onChangeText} value={edit} />\r\n        )}\r\n      </div>\r\n      <div css={content__button__toggle}>\r\n        <div onClick={() => onToggleHandler(todos.id)}>\r\n          {toggle ? \"수정\" : \"적용\"}\r\n        </div>\r\n        <div onClick={() => onDeleteHandler(todos.id)}>삭제</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(TodolistItem);\r\n\r\nconst content__button__change_true = css({\r\n  width: 20,\r\n  height: 20,\r\n  backgroundColor: \"#03DAC5\",\r\n});\r\n\r\nconst content__text__change_true = css({\r\n  textDecoration: \"line-through\",\r\n  marginLeft: 10,\r\n});\r\n\r\nconst content__button__toggle = css({\r\n  \"& div\": {\r\n    marginRight: 20,\r\n  },\r\n});\r\n","/** @jsx jsx */\r\nimport React from \"react\";\r\nimport TodolistItem from \"./TodolistItem\";\r\nimport { jsx } from \"@emotion/react\";\r\n\r\ninterface Todo {\r\n  id: number;\r\n  text: string;\r\n  checked: Boolean;\r\n}\r\ninterface TodolistProps {\r\n  todo: Todo[];\r\n  onDeleteHandler(todoId: number): void;\r\n  onCheckToggleHandler(todoId: number): void;\r\n  onEditHandler(todoId: number, editedText: string): void;\r\n}\r\n\r\nconst Todolist: React.FC<TodolistProps> = ({\r\n  todo,\r\n  onDeleteHandler,\r\n  onCheckToggleHandler,\r\n  onEditHandler,\r\n}) => {\r\n  return (\r\n    <React.Fragment>\r\n      {todo.map((todos: Todo) => (\r\n        <TodolistItem\r\n          key={todos.id}\r\n          todos={todos}\r\n          onDeleteHandler={onDeleteHandler}\r\n          onCheckToggleHandler={onCheckToggleHandler}\r\n          onEditHandler={onEditHandler}\r\n        />\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Todolist;\r\n","/** @jsx jsx */\r\nimport React from \"react\";\r\nimport { jsx, css, useTheme } from \"@emotion/react\";\r\n\r\ninterface TodoInsertProps {\r\n  onSubmitHandler(e: any): void;\r\n  onChangeInput(e: any): void;\r\n  todoInput: string;\r\n}\r\n\r\nconst TodoInsert: React.FC<TodoInsertProps> = ({\r\n  onSubmitHandler,\r\n  todoInput,\r\n  onChangeInput,\r\n}) => {\r\n  const theme = useTheme() as any;\r\n\r\n  const content__button_confirm = css({\r\n    width: 70,\r\n    backgroundColor: `${theme.buttonBg}`,\r\n    color: `${theme.text}`,\r\n    border: `1px solid ${theme.buttonBorder}`,\r\n    borderRadius: 4,\r\n    transitionDuration: \"0.2s\",\r\n    transitionProperty: \"color, background-color\",\r\n    cursor: \"pointer\",\r\n    \"&:hover\": {\r\n      backgroundColor: `${theme.buttonBgHover}`,\r\n      color: `${theme.buttonTextHover}`,\r\n    },\r\n  });\r\n\r\n  const content_wrapper__form = css({\r\n    display: \"flex\",\r\n    marginBottom: 20,\r\n  });\r\n\r\n  const content_wrapper__input = css({\r\n    color: `${theme.inputText}`,\r\n    border: `1px solid ${theme.inputBorder}`,\r\n    backgroundColor: `${theme.inputBackgroundColor}`,\r\n    width: 500,\r\n    height: 40,\r\n    paddingLeft: 10,\r\n    fontSize: 20,\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={onSubmitHandler} css={content_wrapper__form}>\r\n      <input\r\n        css={content_wrapper__input}\r\n        onChange={onChangeInput}\r\n        value={todoInput}\r\n      />\r\n      <button css={content__button_confirm}>추가</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;\r\n","/** @jsx jsx */\r\nimport React from \"react\";\r\nimport { jsx, css, useTheme } from \"@emotion/react\";\r\n\r\ninterface Todo {\r\n  id: Number;\r\n  text: String;\r\n  checked: Boolean;\r\n}\r\ninterface TodoHeaderProps {\r\n  todo: Todo[];\r\n  onSearchHandler(e: any): void;\r\n}\r\n\r\nconst TodoHeader: React.FC<TodoHeaderProps> = ({ todo, onSearchHandler }) => {\r\n  const undoneTasks = todo.filter((todos) => !todos.checked);\r\n\r\n  const today = new Date();\r\n  const dateString = today.toLocaleDateString(\"ko-KR\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n  const dayName = today.toLocaleDateString(\"ko-KR\", { weekday: \"long\" });\r\n\r\n  const theme = useTheme() as any;\r\n\r\n  const header__main_title = css({\r\n    color: `${theme.headerMainTitleText}`,\r\n    fontSize: 50,\r\n    textAlign: \"center\",\r\n  });\r\n\r\n  const header__sub_title = css({\r\n    color: `${theme.headerSubTitleText}`,\r\n    transitionDuration: \"0.2s\",\r\n    transitionProperty: \"color\",\r\n  });\r\n\r\n  const header__content = css({\r\n    color: \"#CF6679\",\r\n    transitionDuration: \"0.2s\",\r\n    transitionProperty: \"color\",\r\n  });\r\n\r\n  const header__input = css({\r\n    fontSize: 20,\r\n    width: 500,\r\n    height: 40,\r\n    paddingLeft: 10,\r\n    marginBottom: \"0.5rem\",\r\n    color: `${theme.inputText}`,\r\n    border: `1px solid ${theme.inputBorder}`,\r\n    backgroundColor: `${theme.inputBackgroundColor}`,\r\n  });\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div css={header__main_title}>TO-DO-LIST</div>\r\n      <h1 css={header__sub_title}>\r\n        {dateString} {dayName}\r\n      </h1>\r\n      <input\r\n        css={header__input}\r\n        onChange={onSearchHandler}\r\n        placeholder=\"할일 검색하기\"\r\n      />\r\n      <h2 css={header__content}>할 일 {undoneTasks.length}개 남음</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoHeader;\r\n","/** @jsx jsx */\r\nimport React, { useState, useRef, useCallback } from \"react\";\r\nimport Todolist from \"./Todolist\";\r\nimport TodoInsert from \"./TodoInsert\";\r\nimport TodoHeader from \"./TodoHeader\";\r\nimport { jsx, css, useTheme } from \"@emotion/react\";\r\nimport { debounce } from \"lodash\";\r\n\r\ninterface Todo {\r\n  id: number;\r\n  text: string;\r\n  checked: Boolean;\r\n}\r\ninterface TodoProps {\r\n  isDark: boolean;\r\n  setDark: (value: boolean) => void; // setDark: React.Dispatch<React.SetStateAction<boolean>>;\r\n}\r\n\r\nconst Todo: React.FC<TodoProps> = ({ isDark, setDark }) => {\r\n  const [todoInput, setTodoInput] = useState<string>(\"\");\r\n  const [todo, setTodo] = useState<Todo[]>(\r\n    JSON.parse(localStorage.getItem(\"todo\")!) || [] // Non-null assertion operator, ! 는 앞의 값이 확실히 null이나 undefined가 아니라는 걸 알리려고 할 때 쓴다.\r\n  );\r\n  const [keyword, setKeyword] = useState<string>(\"\");\r\n\r\n  let nextId = useRef(\r\n    (Math.max(\r\n      ...JSON.parse(localStorage.getItem(\"todo\")!).map((todos: any) => todos.id)\r\n    ) +\r\n      1) |\r\n      1\r\n  );\r\n\r\n  const onSubmitHandler = useCallback(\r\n    (e: React.FormEvent<HTMLFormElement>) => {\r\n      e.preventDefault();\r\n      if (!todoInput) {\r\n        alert(\"할 일을 입력해주세요\");\r\n        return;\r\n      }\r\n      const todos: Todo = {\r\n        id: nextId.current++,\r\n        text: todoInput,\r\n        checked: false,\r\n      };\r\n\r\n      setTodo(todo.concat(todos));\r\n\r\n      localStorage.setItem(\"todo\", JSON.stringify(todo.concat(todos)));\r\n      setTodoInput(\"\");\r\n    },\r\n    [todo, todoInput]\r\n  );\r\n\r\n  const onChangeInput = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setTodoInput(e.target.value);\r\n    // console.log(e.target.value); //debounce\r\n  };\r\n\r\n  const onDeleteHandler = useCallback(\r\n    (todoId: number): void => {\r\n      setTodo(todo.filter((todos) => todos.id !== todoId));\r\n      localStorage.setItem(\r\n        \"todo\",\r\n        JSON.stringify(todo.filter((todos) => todos.id !== todoId))\r\n      );\r\n    },\r\n    [todo]\r\n  );\r\n\r\n  const onCheckToggleHandler = useCallback(\r\n    (todoId: number): void => {\r\n      setTodo(\r\n        todo.map((todos) =>\r\n          todos.id === todoId ? { ...todos, checked: !todos.checked } : todos\r\n        )\r\n      );\r\n      console.log(todo);\r\n    },\r\n    [todo]\r\n  );\r\n\r\n  const onEditHandler = useCallback(\r\n    (todoId: number, editedText: string): void => {\r\n      setTodo(\r\n        todo.map((todos) =>\r\n          todos.id === todoId ? { ...todos, text: editedText } : todos\r\n        )\r\n      );\r\n      setTodoInput(\"\");\r\n    },\r\n    [todo]\r\n  );\r\n\r\n  const debounceHandler = debounce((evt) => {\r\n    setKeyword(evt);\r\n  }, 500);\r\n\r\n  const onSearchHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    debounceHandler(e.target.value);\r\n  };\r\n\r\n  // const todoFilter = useCallback((): Todo[] => {\r\n  //   return todo.filter((todos) => todos.text.indexOf(keyword) > -1);\r\n  // }, [todo, keyword]);\r\n\r\n  const theme = useTheme() as any;\r\n\r\n  const wrapper = css({\r\n    maxWidth: 540,\r\n    margin: \"auto\",\r\n  });\r\n\r\n  const content = css({\r\n    overflowY: \"auto\",\r\n    height: 520,\r\n    marginBottom: 40,\r\n  });\r\n\r\n  const container = css({\r\n    backgroundColor: `${theme.background}`,\r\n    color: `${theme.text}`,\r\n    textAlign: \"center\",\r\n    height: \"100vh\",\r\n    transitionDuration: \"0.2s\",\r\n    transitionProperty: \"color, background-color\",\r\n  });\r\n\r\n  const footer = css({\r\n    padding: 5,\r\n    width: 90,\r\n    backgroundColor: `${theme.buttonBg}`,\r\n    color: `${theme.text}`,\r\n    border: `1px solid ${theme.buttonBorder}`,\r\n    borderRadius: 4,\r\n    transitionDuration: \"0.2s\",\r\n    transitionProperty: \"color, background-color\",\r\n    cursor: \"pointer\",\r\n    \"&:hover\": {\r\n      backgroundColor: `${theme.buttonBgHover}`,\r\n      color: `${theme.buttonTextHover}`,\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div\r\n      css={container}\r\n      // css={css`\r\n      //   background-color: ${theme.background};\r\n      //   color: ${theme.text};\r\n      //   text-align: center;\r\n      //   height: 100vh;\r\n      //   transition-duration: 0.2s;\r\n      //   transition-property: background-color, color;\r\n      // `}\r\n    >\r\n      <div css={wrapper}>\r\n        <TodoHeader todo={todo} onSearchHandler={onSearchHandler} />\r\n        <TodoInsert\r\n          onSubmitHandler={onSubmitHandler}\r\n          onChangeInput={onChangeInput}\r\n          todoInput={todoInput}\r\n        />\r\n        <div css={content}>\r\n          <Todolist\r\n            todo={todo.filter((todos) => todos.text.indexOf(keyword) > -1)}\r\n            onDeleteHandler={onDeleteHandler}\r\n            onCheckToggleHandler={onCheckToggleHandler}\r\n            onEditHandler={onEditHandler}\r\n          />\r\n        </div>\r\n        <button\r\n          css={footer}\r\n          onClick={() => {\r\n            setDark(!isDark);\r\n          }}\r\n        >\r\n          {isDark ? \"light mode\" : \"dark mode\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","/** @jsx jsx */\nimport React, { useState } from \"react\";\nimport Todo from \"./todolist/Todo\";\nimport \"./App.css\";\nimport { jsx, ThemeProvider } from \"@emotion/react\";\n\nconst themeLight = {\n  text: \"#000\",\n  inputText: \"#000\",\n  inputBorder: \"#000\",\n  inputBackgroundColor: \"#fff\",\n  background: \"#fff\",\n  buttonText: \"000\",\n  buttonTextHover: \"#fff\",\n  buttonBorder: \"#000\",\n  buttonBg: \"rgba(0, 0, 0, 0)\",\n  buttonBgHover: \"rgba(0, 0, 0, 0.7)\",\n  nthBg: \"#f2f2f2\",\n  headerMainTitleText: \"#6200EE\", \n  headerSubTitleText: \"#018786\",\n  headerContentText: \"B00020\",\n};\n\nconst themeDark = {\n  text: \"#fff\",\n  inputText: \"#fff\",\n  inputBorder: \"#fff\",\n  inputBackgroundColor: \"#000\",\n  background: \"#121212\",\n  buttonText: \"fff\",\n  buttonTextHover: \"#000\",\n  buttonBorder: \"#fff\",\n  buttonBg: \"rgba(48, 48, 47, 1)\",\n  buttonBgHover: \"rgba(255, 255, 255, 1)\",\n  nthBg: \"#30302f\",\n  headerMainTitleText: \"#BB86FC\",\n  headerSubTitleText: \"#03DAC6\",\n  headerContentText: \"CF6679\",\n};\n\nconst App: React.FC = () => {\n  const [isDark, setDark] = useState(false);\n\n  return (\n    <ThemeProvider theme={isDark ? themeDark : themeLight}>\n      <Todo isDark={isDark} setDark={setDark} />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}